---
name: 'OPI Security PoC CI'

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

concurrency:
  # if workflow for PR or push is already running stop it, and start new one
  group: poc-security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - server
          - client
    steps:
    - uses: actions/checkout@v3
    - uses: docker/setup-qemu-action@v2
    - uses: docker/setup-buildx-action@165fe681b849eec43aaa64d786b9ec53e690475f

    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@3da7dc6e2b31f99ef2cb9fb4c50fb0971e0d0139
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/opi-security-${{ matrix.package }}

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@2a168352239e71061d0e86de1b39d4c78f829a3d
      with:
        context: ${{ matrix.package }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@165fe681b849eec43aaa64d786b9ec53e690475f

    - name: Start containers
      run: docker-compose up -d

    - name: Logs
      if: failure()
      run: docker-compose logs

    - name: Stop containers
      if: always()
      run: docker-compose down

    - name: Run Tests
      run: |
        set -x
        docker-compose up -d
        docker-compose ps
        docker-compose up -d opi-security-client
        grpc_cli=(docker run --network=opi-strongswan-bridge_internet --rm namely/grpc-cli)
        "${grpc_cli[@]}" ls opi-security-server:50151
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecVersion -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecStats -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecInitiate -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecTerminate -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecRekey -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecListSas -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecListConns -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecListCerts -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecLoadConn -l
        "${grpc_cli[@]}" ls opi-security-server:50151 opi_api.security.v1.IPsec.IPsecUnloadConn -l

    - name: Logs
      if: always()
      run: docker-compose logs

    - name: Stop containers
      if: always()
      run: docker-compose down
